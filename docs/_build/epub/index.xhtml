<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Table of contents</title>
    <link rel="stylesheet" href="_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <p>Automagica Documentation</p>
<p>This is the documentation for automating in Automagica Smart Automation.
Automagica is based on the Python language.</p>
<p><img alt="Automagica" src="_images/logo.png" /></p>
<div class="section" id="table-of-contents">
<span id="table-of-contents"></span><h1>Table of contents</h1>
<ul class="simple">
<li><p><a class="reference external" href="#getting-started">Getting Started</a></p>
<ul>
<li><p><a class="reference external" href="#Prerequisites">Prerequisites</a></p></li>
<li><p><a class="reference external" href="#installing-instructions">Installing instructions</a></p></li>
<li><p><a class="reference external" href="#failsafe">Failsafe</a></p></li>
<li><p><a class="reference external" href="#examples">Examples</a></p></li>
<li><p><a class="reference external" href="#automagica-with-natural-language-for-prototyping">Automagica with Natural Language</a></p></li>
</ul>
</li>
<li><p><a class="reference external" href="#browser-automation">Browser Automation</a></p>
<ul>
<li><p><a class="reference external" href="#basic-functions">Basic functions</a></p></li>
<li><p><a class="reference external" href="#navigating">Navigating</a></p>
<ul>
<li><p><a class="reference external" href="#quick-start">Quick start</a></p></li>
<li><p><a class="reference external" href="#selecting-elements">Selecting elements</a></p>
<ul>
<li><p><a class="reference external" href="#selection-by-name">Selection by name</a></p></li>
<li><p><a class="reference external" href="#selection-by-id">Selection by Id</a></p></li>
</ul>
</li>
<li><p><a class="reference external" href="#selection-by-xpath">Selection by Xpath</a></p></li>
<li><p><a class="reference external" href="#browsing-example">Browsing Example</a></p></li>
</ul>
</li>
</ul>
</li>
<li><p><a class="reference external" href="#office-automation">Office Automation</a></p>
<ul>
<li><p><a class="reference external" href="#word">Word</a></p></li>
<li><p><a class="reference external" href="#excel">Excel</a></p></li>
</ul>
</li>
<li><p><a class="reference external" href="#basic-operations">Basic operations</a></p>
<ul>
<li><p><a class="reference external" href="#variables-and-types">Variables and Types</a></p>
<ul>
<li><p><a class="reference external" href="#strings">Strings</a></p>
<ul>
<li><p><a class="reference external" href="#string-manipulation">String manipulation</a></p>
<ul>
<li><p><a class="reference external" href="#adding-variables-to-a-string">Adding variables to a string</a></p></li>
<li><p><a class="reference external" href="#slicing-strings">Slicing strings</a></p></li>
<li><p><a class="reference external" href="#string-replacing">String replacing</a></p></li>
<li><p><a class="reference external" href="#upper-and-lower-cases-in-strings">Upper and lower cases in strings</a></p></li>
<li><p><a class="reference external" href="#splitting-strings">Splitting strings</a></p></li>
</ul>
</li>
</ul>
</li>
<li><p><a class="reference external" href="#numbers">Numbers</a></p>
<ul>
<li><p><a class="reference external" href="#integers">Integers</a></p></li>
<li><p><a class="reference external" href="#floats">Floats</a></p></li>
</ul>
</li>
<li><p><a class="reference external" href="#math-operations">Math operations</a></p></li>
</ul>
</li>
<li><p><a class="reference external" href="#lists">Lists</a></p></li>
<li><p><a class="reference external" href="#logic-operations">Logic operations</a></p>
<ul>
<li><p><a class="reference external" href="#if-statement">If statement</a></p></li>
<li><p><a class="reference external" href="#while-loops">While loops</a></p></li>
<li><p><a class="reference external" href="#for-loops">For loops</a></p></li>
</ul>
</li>
</ul>
</li>
<li><p><a class="reference external" href="#examples">Examples</a></p></li>
<li><p><a class="reference external" href="#credits">Credits</a></p></li>
</ul>
</div>
<div class="section" id="getting-started">
<span id="getting-started"></span><h1>Getting started</h1>
<p>Refer to our <a class="reference external" href="https://www.automagica.be">website</a><span class="link-target"> [https://www.automagica.be]</span> for more information, registered users can acces the <a class="reference external" href="https://portal.automagica.be">portal</a><span class="link-target"> [https://portal.automagica.be]</span>. More details also available on our <a class="reference external" href="https://github.com/OakwoodAI/automagica">github</a><span class="link-target"> [https://github.com/OakwoodAI/automagica]</span>.</p>
<p>Alternatively you can use Automagica locally by starting your Python script with:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">automagica</span> <span class="k">import</span> <span class="o">*</span>
</pre></div>
</div>
<p>For a step-to-step tutorial on how to install and configure Python see <a class="reference external" href="https://www.youtube.com/watch?v=cpPG0bKHYKc">this video</a><span class="link-target"> [https://www.youtube.com/watch?v=cpPG0bKHYKc]</span>.<br/>
For a step-to-step tutorial on how to build and run a Python script see <a class="reference external" href="https://www.youtube.com/watch?v=hFhiV5X5QM4">this video</a><span class="link-target"> [https://www.youtube.com/watch?v=hFhiV5X5QM4]</span>.</p>
<div class="section" id="prerequisites">
<span id="prerequisites"></span><h2>Prerequisites</h2>
<ul class="simple">
<li><p>Python 3.6.4 from <a class="reference external" href="https://www.python.org">www.python.org</a><span class="link-target"> [https://www.python.org]</span></p></li>
</ul>
</div>
<div class="section" id="installation-instructions">
<span id="installation-instructions"></span><h2>Installation instructions</h2>
<p>Install Automagica on the bot host machine:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">pip</span> <span class="n">install</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">OakwoodAI</span><span class="o">/</span><span class="n">automagica</span><span class="o">/</span><span class="n">tarball</span><span class="o">/</span><span class="n">master</span>
</pre></div>
</div>
<div class="section" id="optional-optical-character-recognition">
<span id="optional-optical-character-recognition"></span><h3>Optional Optical Character Recognition</h3>
<p>For <em>Windows</em>, install Tesseract 4 <a class="reference external" href="http://digi.bib.uni-mannheim.de/tesseract/tesseract-ocr-setup-4.00.00dev.exe">from here</a><span class="link-target"> [http://digi.bib.uni-mannheim.de/tesseract/tesseract-ocr-setup-4.00.00dev.exe]</span>.</p>
<p>For <em>Linux</em> (Ubuntu):</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">tesseract</span><span class="o">-</span><span class="n">ocr</span>
</pre></div>
</div>
<p>For <em>MacOS</em>:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">brw</span> <span class="n">install</span> <span class="n">tesseract</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="failsafe">
<span id="failsafe"></span><h2>Failsafe</h2>
<p>As a safety feature, a failsafe mechanism is enabled by default. You can trigger this by moving your mouse to the upper left corner of the screen. You can disable this by running the following command:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">Failsafe</span><span class="p">(</span><span class="kc">False</span><span class="p">)</span>
</pre></div>
</div>
</div>
<div class="section" id="examples">
<span id="examples"></span><h2>Examples</h2>
<p>For some animated examples see: <a class="reference external" href="https://raw.githubusercontent.com/OakwoodAI/automagica/master/images/browser_excel.gif">Browser working with Excel</a><span class="link-target"> [https://raw.githubusercontent.com/OakwoodAI/automagica/master/images/browser_excel.gif]</span> and <a class="reference external" href="https://github.com/OakwoodAI/automagica/blob/master/images/sap.gif">SAP Automation</a><span class="link-target"> [https://github.com/OakwoodAI/automagica/blob/master/images/sap.gif]</span></p>
</div>
<div class="section" id="automagica-with-natural-language-for-prototyping">
<span id="automagica-with-natural-language-for-prototyping"></span><h2>Automagica with Natural Language for prototyping</h2>
<p>Wouldn’t it be cool if we could write Robotic Process Automation scripts in plain ol’ English rather than the already easy Python scripting language? Well it’s possible with Automagica! We have cooked up a more human-friendly interface to get started with automation!</p>
<div class="section" id="how-it-works">
<span id="how-it-works"></span><h3>How it works</h3>
<p>Natural language for Automagica (.nla) looks like this:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="nb">open</span> <span class="n">the</span> <span class="n">browser</span>
<span class="n">navigate</span> <span class="n">to</span> <span class="n">google</span><span class="o">.</span><span class="n">com</span>
<span class="n">search</span> <span class="k">for</span> <span class="n">oranges</span>
</pre></div>
</div>
</div>
<div class="section" id="try-it-yourself">
<span id="try-it-yourself"></span><h3>Try it yourself</h3>
<p>NLP is handled by Wit.ai. A Wit.ai key is included, so you can get a headstart!</p>
<p>Install (in addition to the above) the following required package:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">pip</span> <span class="n">install</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">OakwoodAI</span><span class="o">/</span><span class="n">understanding</span><span class="o">/</span><span class="n">tarball</span><span class="o">/</span><span class="n">master</span>
</pre></div>
</div>
<p>Then install Natural Language for Automagica:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">git</span> <span class="n">clone</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">OakwoodAI</span><span class="o">/</span><span class="n">natural</span><span class="o">-</span><span class="n">language</span><span class="o">-</span><span class="n">automagica</span>
<span class="n">cd</span> <span class="n">natural</span><span class="o">-</span><span class="n">language</span><span class="o">-</span><span class="n">automagica</span>
<span class="n">pip</span> <span class="n">install</span> <span class="o">.</span>
</pre></div>
</div>
<p>Then you can get started by running the examples:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">cd</span> <span class="n">examples</span>
<span class="n">nla</span> <span class="n">google</span><span class="o">.</span><span class="n">nla</span>
<span class="n">nla</span> <span class="n">wikipedia</span><span class="o">.</span><span class="n">nla</span>
<span class="n">nla</span> <span class="n">youtube</span><span class="o">.</span><span class="n">nla</span>
</pre></div>
</div>
<p>Automagica with natural language is still in development and it’s main goal for now is to speed up prototyping.
Not all Automagica activities are supported as natural language and we do not recommend this for production builds for now.</p>
</div>
</div>
</div>
<div class="section" id="browser-automation">
<span id="browser-automation"></span><h1>Browser Automation</h1>
<p>Out-of-the box Automagica uses Chrome as automated browser. The following sections will explain how to find, read and manipulate web elements.</p>
<div class="section" id="basic-functions">
<span id="basic-functions"></span><h2>Basic functions</h2>
<p>To open a browser choose ‘Open Chrome browser’ from menu or type the command:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">browser</span> <span class="o">=</span> <span class="n">ChromeBrowser</span><span class="p">()</span>
</pre></div>
</div>
<p>The browser function will wait until the page has fully loaded (that is, the “onload” event has fired) before continuing in the Automagica script. It’s worth noting that if your page uses a lot of AJAX on load then the browser function may not know when it has completely loaded.</p>
<p>Browse to a website by clicking ‘Browse to URL’ in the menu or use the command:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">browser</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;https://mywebsite.com/&#39;</span><span class="p">)</span>
</pre></div>
</div>
<p>Closing the browser can be done by:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">browser</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</pre></div>
</div>
<p>To move backward and forward in your browser’s history:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">browser</span><span class="o">.</span><span class="n">forward</span><span class="p">()</span>
<span class="n">browser</span><span class="o">.</span><span class="n">back</span><span class="p">()</span>
</pre></div>
</div>
<p>To click on an element:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">element</span><span class="o">.</span><span class="n">click</span><span class="p">()</span>
</pre></div>
</div>
<p>To enter text into a text field:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">element</span><span class="o">.</span><span class="n">send_keys</span><span class="p">(</span><span class="s2">&quot;some text&quot;</span><span class="p">)</span>
</pre></div>
</div>
<p>To clear an element:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">element</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span>
</pre></div>
</div>
<p>An optional check to see if you are on the correct website is to check the title. For example if you are surfing to https://www.google.com, you might want to check if “Google” is in the title to make sure the bot surfed to the correct page.</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">browser</span> <span class="o">=</span> <span class="n">ChromeBrowser</span><span class="p">()</span>
<span class="n">browser</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;https://google.com/&#39;</span><span class="p">)</span>
<span class="k">if</span> <span class="ow">not</span> <span class="s2">&quot;Google&quot;</span> <span class="ow">in</span> <span class="n">browser</span><span class="o">.</span><span class="n">title</span><span class="p">:</span>
    <span class="n">errorbox</span><span class="p">(</span><span class="s2">&quot;Site is not correct&quot;</span><span class="p">)</span>
</pre></div>
</div>
</div>
<div class="section" id="navigating">
<span id="navigating"></span><h2>Navigating</h2>
<p>To navigate and perform actions in the browser it is crucial to locate elements. Elements can be everything in the html files of a website like text, titles, buttons, text fields, tables, etc…</p>
<div class="section" id="quick-start">
<span id="quick-start"></span><h3>Quick start</h3>
<p>There are two methods to finding elements, <em>find_element</em> to find a single element and <em>find_elements</em> to find multiple.
Arguably the easiest way to find a certain element is by copying it’s XPath.</p>
<p>To do this in Chrome right click on the element you want to find, in the example below this is the “Google Search” button on Google.com. Click <em>inspect element</em> and a side tab with the html code opens with the element you selected highlighted in blue.</p>
<p><img alt="Imgur" src="_images/A2xdvUP.png" /></p>
<p>In the html code, right click the highlighted block and select <em>Copy</em> -&gt; <em>Copy XPath</em>.</p>
<p><img alt="Imgur" src="_images/WRD46Xi.png" /></p>
<p>You can now use the absolute XPath to manipulate the element. However this is a fast method for prototyping, we do not recommend using absolute paths in production environments. Slight changes in the html code would cause the absolute path to change and to likely cause errors. A more in-depth overview in the next section.</p>
</div>
<div class="section" id="selecting-elements">
<span id="selecting-elements"></span><h3>Selecting elements</h3>
<div class="section" id="selection-by-name">
<span id="selection-by-name"></span><h4>Selection by name</h4>
<p>Use this when you know name attribute of an element. With this strategy, the first element with the name attribute value matching the location will be returned. If no element has a matching name attribute, a NoSuchElementException will be raised.</p>
<p>For instance, consider these elements on a webpage:</p>
<p><html></p>
 <body>
  <form id="loginForm">
   <input name="username" type="text" />
   <input name="password" type="password" />
   <input name="continue" type="submit" value="Login" />
   <input name="continue" type="button" value="Clear" />
  </form>
</body>
<html><p><p> </p>
</p>
<p>The corresponding html code would be:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="o">&lt;</span><span class="n">html</span><span class="o">&gt;</span>
 <span class="o">&lt;</span><span class="n">body</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">form</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;loginForm&quot;</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nb">input</span> <span class="n">name</span><span class="o">=</span><span class="s2">&quot;username&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span> <span class="o">/&gt;</span>
  <span class="o">&lt;</span><span class="nb">input</span> <span class="n">name</span><span class="o">=</span><span class="s2">&quot;password&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;password&quot;</span> <span class="o">/&gt;</span>
  <span class="o">&lt;</span><span class="nb">input</span> <span class="n">name</span><span class="o">=</span><span class="s2">&quot;loginbutton&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;submit&quot;</span> <span class="n">value</span><span class="o">=</span><span class="s2">&quot;Login&quot;</span> <span class="o">/&gt;</span>
  <span class="o">&lt;</span><span class="nb">input</span> <span class="n">name</span><span class="o">=</span><span class="s2">&quot;clearbutton&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;button&quot;</span> <span class="n">value</span><span class="o">=</span><span class="s2">&quot;Clear&quot;</span> <span class="o">/&gt;</span>
  <span class="o">&lt;/</span><span class="n">form</span><span class="o">&gt;</span>
 <span class="o">&lt;/</span><span class="n">body</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="n">html</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>The username and password field can be found by:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">username</span> <span class="o">=</span> <span class="n">browser</span><span class="o">.</span><span class="n">find_element_by_name</span><span class="p">(</span><span class="s1">&#39;username&#39;</span><span class="p">)</span>
<span class="n">password</span> <span class="o">=</span> <span class="n">browser</span><span class="o">.</span><span class="n">find_element_by_name</span><span class="p">(</span><span class="s1">&#39;password&#39;</span><span class="p">)</span>
</pre></div>
</div>
<p>To fill in the fields:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">username</span><span class="o">.</span><span class="n">send_keys</span><span class="p">(</span><span class="s2">&quot;Automagica_User1&quot;</span><span class="p">)</span>
<span class="n">password</span><span class="o">.</span><span class="n">send_keys</span><span class="p">(</span><span class="s2">&quot;thisismypassword123&quot;</span><span class="p">)</span>
</pre></div>
</div>
<p>To find and click on the login button:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">login</span> <span class="o">=</span> <span class="n">browser</span><span class="o">.</span><span class="n">find_element_by_name</span><span class="p">(</span><span class="s1">&#39;loginbutton&#39;</span><span class="p">)</span>
<span class="n">login</span><span class="o">.</span><span class="n">click</span><span class="p">()</span>
</pre></div>
</div>
<p><strong>Side note</strong></p>
<p>In case of double naming, finding by name always finds the first element. Imagine the following html code:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="o">&lt;</span><span class="n">html</span><span class="o">&gt;</span>
 <span class="o">&lt;</span><span class="n">body</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">form</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;loginForm&quot;</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nb">input</span> <span class="n">name</span><span class="o">=</span><span class="s2">&quot;username&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span> <span class="o">/&gt;</span>
  <span class="o">&lt;</span><span class="nb">input</span> <span class="n">name</span><span class="o">=</span><span class="s2">&quot;continue&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;submit&quot;</span> <span class="n">value</span><span class="o">=</span><span class="s2">&quot;Login&quot;</span> <span class="o">/&gt;</span>
  <span class="o">&lt;</span><span class="nb">input</span> <span class="n">name</span><span class="o">=</span><span class="s2">&quot;continue&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;button&quot;</span> <span class="n">value</span><span class="o">=</span><span class="s2">&quot;Clear&quot;</span> <span class="o">/&gt;</span>
  <span class="o">&lt;/</span><span class="n">form</span><span class="o">&gt;</span>
 <span class="o">&lt;/</span><span class="n">body</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="n">html</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>The following command will find the first element with the name “continue” and thus selecting the Login button:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="k">continue</span> <span class="o">=</span> <span class="n">browser</span><span class="o">.</span><span class="n">find_element_by_name</span><span class="p">(</span><span class="s1">&#39;continue&#39;</span><span class="p">)</span>
</pre></div>
</div>
</div>
<div class="section" id="selection-by-id">
<span id="selection-by-id"></span><h4>Selection by Id</h4>
<p>You can select elements by Id when this is known. This is a robust method, yet generally nog every element had a known id tag. Consider the html code below:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="o">&lt;</span><span class="n">html</span><span class="o">&gt;</span>
 <span class="o">&lt;</span><span class="n">body</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">form</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;loginForm&quot;</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nb">input</span> <span class="n">name</span><span class="o">=</span><span class="s2">&quot;username&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span> <span class="o">/&gt;</span>
  <span class="o">&lt;</span><span class="nb">input</span> <span class="n">name</span><span class="o">=</span><span class="s2">&quot;continue&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;submit&quot;</span> <span class="n">value</span><span class="o">=</span><span class="s2">&quot;Login&quot;</span> <span class="o">/&gt;</span>
  <span class="o">&lt;/</span><span class="n">form</span><span class="o">&gt;</span>
 <span class="o">&lt;/</span><span class="n">body</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="n">html</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>In this case the form has an id “loginForm”. Hence the form can be selected with the Id by:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">loginform</span> <span class="o">=</span> <span class="n">browser</span><span class="o">.</span><span class="n">find_element_by_id</span><span class="p">(</span><span class="s1">&#39;loginForm&#39;</span><span class="p">)</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="selection-by-xpath">
<span id="selection-by-xpath"></span><h3>Selection by Xpath</h3>
<p>XPath (XML Path Language) is a query language for selecting nodes from an XML document. Since HTML can be an implementation of XML (referred to as XHTML), this language can be used to find and manipulate target elements in web applications.</p>
<p>The advantage of using XPath is the possibility to reach every element within an HTML structure. See <a class="reference external" href="#quick-start">Quick start</a> for a visual introduction on how to find and use an element with XPath.
The disadvantage of using a full XPath is that it is not very robust. Even the slightest changes in a HTML page would cause absolute XPaths to change, which in result will likely cause your robot unable to find the correct elements. Note that this is different from using an element name or id, as elements will still be able to be found with changes in the HTML page as long as the name or id remains the same.</p>
<p>Therefore, when working with Xpath the robustness can be increased by finding a nearby element with an id or name attribute (ideally a parent element), so you can locate your target element based on the relationship.</p>
<p>Consider the following structure on a HTML page:</p>
<p><html></p>
 <body>
  <form id="loginForm">
   <input name="username" type="text" />
   <input name="password" type="password" />
   <input name="continue" type="submit" value="Login" />
   <input name="continue" type="button" value="Clear" />
  </form>
</body>
<html><p><p> </p>
</p>
<p>With the following source code:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="o">&lt;</span><span class="n">html</span><span class="o">&gt;</span>
 <span class="o">&lt;</span><span class="n">body</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">form</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;loginForm&quot;</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nb">input</span> <span class="n">name</span><span class="o">=</span><span class="s2">&quot;username&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span> <span class="o">/&gt;</span>
  <span class="o">&lt;</span><span class="nb">input</span> <span class="n">name</span><span class="o">=</span><span class="s2">&quot;password&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;password&quot;</span> <span class="o">/&gt;</span>
  <span class="o">&lt;</span><span class="nb">input</span> <span class="n">name</span><span class="o">=</span><span class="s2">&quot;loginbutton&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;submit&quot;</span> <span class="n">value</span><span class="o">=</span><span class="s2">&quot;Login&quot;</span> <span class="o">/&gt;</span>
  <span class="o">&lt;</span><span class="nb">input</span> <span class="n">name</span><span class="o">=</span><span class="s2">&quot;clearbutton&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;button&quot;</span> <span class="n">value</span><span class="o">=</span><span class="s2">&quot;Clear&quot;</span> <span class="o">/&gt;</span>
  <span class="o">&lt;/</span><span class="n">form</span><span class="o">&gt;</span>
 <span class="o">&lt;/</span><span class="n">body</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="n">html</span><span class="o">&gt;</span>
</pre></div>
</div>
<p><strong>Selecting the username:</strong></p>
<ol class="simple">
<li><p>Absolute path (note that this would break if the HTML was changed only slightly)</p></li>
<li><p>Point to the first element in the form</p></li>
<li><p>First input element with attribute named ‘name’ and the value username</p></li>
</ol>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">username</span> <span class="o">=</span> <span class="n">browser</span><span class="o">.</span><span class="n">find_element_by_xpath</span><span class="p">(</span><span class="s2">&quot;//form[input/@name=&#39;username&#39;]&quot;</span><span class="p">)</span>
<span class="n">username</span> <span class="o">=</span> <span class="n">browser</span><span class="o">.</span><span class="n">find_element_by_xpath</span><span class="p">(</span><span class="s2">&quot;//form[@id=&#39;loginForm&#39;]/input[1]&quot;</span><span class="p">)</span>
<span class="n">username</span> <span class="o">=</span> <span class="n">browser</span><span class="o">.</span><span class="n">find_element_by_xpath</span><span class="p">(</span><span class="s2">&quot;//input[@name=&#39;username&#39;]&quot;</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>The “clear” button can be located by:</strong></p>
<ol class="simple">
<li><p>Fourth input element of the form element with attribute named id and value loginForm</p></li>
<li><p>Input with attribute named name and the value continue and attribute named type and the value button</p></li>
</ol>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">clear_button</span> <span class="o">=</span> <span class="n">browser</span><span class="o">.</span><span class="n">find_element_by_xpath</span><span class="p">(</span><span class="s2">&quot;//form[@id=&#39;loginForm&#39;]/input[4]&quot;</span><span class="p">)</span>
<span class="n">clear_button</span> <span class="o">=</span> <span class="n">browser</span><span class="o">.</span><span class="n">find_element_by_xpath</span><span class="p">(</span><span class="s2">&quot;//input[@name=&#39;continue&#39;][@type=&#39;button&#39;]&quot;</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>The form can be selected by:</strong></p>
<ol class="simple">
<li><p>Absolute path (note that this would break if the HTML was changed only slightly):</p></li>
<li><p>First form element in the HTML</p></li>
<li><p>The form element with attribute named id and the value loginForm</p></li>
</ol>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">login_form</span> <span class="o">=</span> <span class="n">browser</span><span class="o">.</span><span class="n">find_element_by_xpath</span><span class="p">(</span><span class="s2">&quot;/html/body/form[1]&quot;</span><span class="p">)</span>
<span class="n">login_form</span> <span class="o">=</span> <span class="n">browser</span><span class="o">.</span><span class="n">find_element_by_xpath</span><span class="p">(</span><span class="s2">&quot;//form[1]&quot;</span><span class="p">)</span>
<span class="n">login_form</span> <span class="o">=</span> <span class="n">browser</span><span class="o">.</span><span class="n">find_element_by_xpath</span><span class="p">(</span><span class="s2">&quot;//form[@id=&#39;loginForm&#39;]&quot;</span><span class="p">)</span>
</pre></div>
</div>
</div>
<div class="section" id="browsing-example">
<span id="browsing-example"></span><h3>Browsing Example</h3>
<p>The following example browses to Google, searches for Automagica, opens the first Google Search result link</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="c1"># Open Chrome</span>
<span class="n">browser</span> <span class="o">=</span> <span class="n">ChromeBrowser</span><span class="p">()</span>

<span class="c1"># Browse to Google</span>
<span class="n">browser</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;https://google.com&#39;</span><span class="p">)</span>

<span class="c1"># Enter Search Text</span>
<span class="n">browser</span><span class="o">.</span><span class="n">find_element_by_xpath</span><span class="p">(</span><span class="s1">&#39;//*[@id=&quot;lst-ib&quot;]&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">send_keys</span><span class="p">(</span><span class="s1">&#39;automagica&#39;</span><span class="p">)</span>

<span class="c1"># Submit</span>
<span class="n">browser</span><span class="o">.</span><span class="n">find_element_by_xpath</span><span class="p">(</span><span class="s1">&#39;//*[@id=&quot;lst-ib&quot;]&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">submit</span><span class="p">()</span>

<span class="c1"># Click the first link</span>
<span class="n">browser</span><span class="o">.</span><span class="n">find_elements_by_class_name</span><span class="p">(</span><span class="s1">&#39;r&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">click</span><span class="p">()</span>
</pre></div>
</div>
</div>
</div>
</div>
<div class="section" id="office-automation">
<span id="office-automation"></span><h1>Office Automation</h1>
<p>A lot of automation processes involve Microsoft Office. Automagica packs some useful functions to make automating office as easy as possible.</p>
<div class="section" id="word">
<span id="word"></span><h2>Word</h2>
<p>To open a Word document:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">document</span> <span class="o">=</span> <span class="n">OpenWordDocument</span><span class="p">(</span><span class="s1">&#39;example.docx&#39;</span><span class="p">)</span>
</pre></div>
</div>
<p>Replace words in a Word document. This can be particularly useful when using templates for forms. Make sure the template contains unique placeholder ariables so that automated filling doesn’t cause ambiguities.</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">document</span> <span class="o">=</span> <span class="n">ReplaceTextInDocument</span><span class="p">(</span><span class="n">document</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="s1">&#39;[placeholder]&#39;</span><span class="p">,</span> <span class="n">replace_with</span><span class="o">=</span><span class="s1">&#39;My text&#39;</span><span class="p">)</span>
</pre></div>
</div>
<p>Converting a Word document to PDF:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">ConvertWordToPDF</span><span class="p">(</span><span class="n">word_filename</span><span class="o">=</span><span class="s1">&#39;C:</span><span class="se">\\</span><span class="s1">document.docx&#39;</span><span class="p">,</span> <span class="n">pdf_filename</span><span class="o">=</span><span class="s1">&#39;C:</span><span class="se">\\</span><span class="s1">document.pdf&#39;</span><span class="p">)</span>
</pre></div>
</div>
</div>
<div class="section" id="excel">
<span id="excel"></span><h2>Excel</h2>
<p>Automation in Excel most of the time requires reading and writing cells. In Automagica, this is very easy.</p>
<p>You can either enter a row and a cell e.g. row = 1, cell = 1 or define a cell name e.g. cell=”A2”.
Note that the first row is defined as row number 1 and the first column is defined column number 1.</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="c1">#Using row and column</span>
<span class="n">ExcelReadCell</span><span class="p">(</span><span class="n">C</span><span class="p">:</span>\\<span class="n">Users</span>\<span class="n">Bob</span>\\<span class="n">Desktop</span>\\<span class="n">RPA</span> <span class="n">Examples</span>\\<span class="n">data</span><span class="o">.</span><span class="n">xlsx</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
<span class="c1">#Using cell value</span>
<span class="n">ExcelReadCell</span><span class="p">(</span><span class="n">C</span><span class="p">:</span>\\<span class="n">Users</span>\<span class="n">Bob</span>\\<span class="n">Desktop</span>\\<span class="n">RPA</span> <span class="n">Examples</span>\\<span class="n">data</span><span class="o">.</span><span class="n">xlsx</span><span class="p">,</span><span class="n">cell</span><span class="o">=</span><span class="n">A1</span><span class="p">)</span>
</pre></div>
</div>
<p>And similar for writing a cell:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="c1">#Using row and column</span>
<span class="n">ExcelWriteCell</span><span class="p">(</span><span class="n">C</span><span class="p">:</span>\\<span class="n">Users</span>\<span class="n">Bob</span>\\<span class="n">Desktop</span>\\<span class="n">RPA</span> <span class="n">Examples</span>\\<span class="n">data</span><span class="o">.</span><span class="n">xlsx</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="n">value</span><span class="o">=</span><span class="s2">&quot;Robot&quot;</span><span class="p">)</span>
<span class="c1">#Using cell value</span>
<span class="n">ExcelWriteCell</span><span class="p">(</span><span class="n">C</span><span class="p">:</span>\\<span class="n">Users</span>\<span class="n">Bob</span>\\<span class="n">Desktop</span>\\<span class="n">RPA</span> <span class="n">Examples</span>\\<span class="n">data</span><span class="o">.</span><span class="n">xlsx</span><span class="p">,</span><span class="n">cell</span><span class="o">=</span><span class="n">A1</span><span class="p">,</span><span class="n">value</span><span class="o">=</span><span class="s2">&quot;Robot&quot;</span><span class="p">)</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="basic-operations">
<span id="basic-operations"></span><h1>Basic operations</h1>
<div class="section" id="variables-and-types">
<span id="variables-and-types"></span><h2>Variables and Types</h2>
<p>Variables are used to store information to be referenced and manipulated in an automation script. They also provide a way of labeling data with a descriptive name, so the automation script can be understood more clearly by the reader. It is helpful to think of variables as containers that hold information. Variables come in a great variety of types. Automagica supports all variable types from the Python language, but down here are some of the most prominent.</p>
<div class="section" id="strings">
<span id="strings"></span><h3>Strings</h3>
<p>A string is any finite sequence of characters (i.e., letters, numerals, symbols and punctuation marks).
Strings are defined either with a single quote or a double quotes.</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">automagica_string</span> <span class="o">=</span> <span class="s2">&quot;robots&quot;</span>
<span class="n">DisplayMessageBox</span><span class="p">(</span><span class="n">automagica_string</span><span class="p">)</span>
</pre></div>
</div>
<div class="section" id="string-manipulation">
<span id="string-manipulation"></span><h4>String manipulation</h4>
<div class="section" id="adding-variables-to-a-string">
<span id="adding-variables-to-a-string"></span><h5>Adding variables to a string</h5>
<p>You can add all variables to a string. If you want, for example, to add an interger to a string you can do so by defining the integer as a string:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">automagica_string</span> <span class="o">=</span> <span class="s2">&quot;robot number &quot;</span>
<span class="n">automagica_integer</span> <span class="o">=</span> <span class="mi">100</span>

<span class="n">automagica_string2</span> <span class="o">=</span> <span class="n">automagica_string</span> <span class="o">+</span> <span class="nb">int</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
<span class="n">DisplayMessageBox</span><span class="p">(</span><span class="n">automagica_string2</span><span class="p">)</span>
</pre></div>
</div>
</div>
<div class="section" id="slicing-strings">
<span id="slicing-strings"></span><h5>Slicing strings</h5>
<p>Adding <strong>[n]</strong> to a string will select the nth character:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">x</span> <span class="o">=</span> <span class="s2">&quot;automagica&quot;</span>
<span class="n">x</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">t</span>
</pre></div>
</div>
<p>Adding <strong>[n:p]</strong> will slice the string from character n to p. By leaving n or p out it will select the first and last character respectively:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">x</span> <span class="o">=</span> <span class="s2">&quot;Hello Robot!&quot;</span>
<span class="n">x</span><span class="p">[:</span><span class="mi">5</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Hello</span>
</pre></div>
</div>
</div>
<div class="section" id="string-replacing">
<span id="string-replacing"></span><h5>String replacing</h5>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span>x = &quot;Robots are evil!&quot;
x.replace(&#39;evil&#39;, &#39;friendly&#39;)
&gt;&gt;&gt;Robots are friendly!
</pre></div>
</div>
</div>
<div class="section" id="upper-and-lower-cases-in-strings">
<span id="upper-and-lower-cases-in-strings"></span><h5>Upper and lower cases in strings</h5>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">x</span> <span class="o">=</span> <span class="s2">&quot;Robots&quot;</span>
<span class="c1">#Convert to upper case</span>
<span class="n">x</span><span class="o">.</span><span class="n">upper</span><span class="p">()</span>
<span class="c1">#Convert to lower case</span>
<span class="n">x</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>
<span class="c1">#Capitalize</span>
<span class="n">x</span><span class="o">.</span><span class="n">capitalize</span><span class="p">()</span>
</pre></div>
</div>
</div>
<div class="section" id="splitting-strings">
<span id="splitting-strings"></span><h5>Splitting strings</h5>
<p>You can choose to split a string at a certain word or character. Don’t forget to indicate if you want to keep the first or second part of the string by adding [0] or [1] as splitting causes your string to turn in to a list of multiple strings:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span>x = &quot;Robots will take over the world!&quot;
x.split(&quot; over &quot;)
&gt;&gt;&gt;[&#39;Robots will take&#39;, &#39;the world!&#39;]
#Accesing the different strings can be done by:
x[0]
&gt;&gt;&gt;Robots will take
x[1]
&gt;&gt;&gt;the world!&quot;
</pre></div>
</div>
</div>
</div>
</div>
<div class="section" id="numbers">
<span id="numbers"></span><h3>Numbers</h3>
<div class="section" id="integers">
<span id="integers"></span><h4>Integers</h4>
<p>An integer (of int in short) is a whole number, not a fractional number, that can be positive, negative, or zero.</p>
<p>To declare and display an integer:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">automagica_integer</span> <span class="o">=</span> <span class="mi">5</span>
<span class="n">DisplayMessageBox</span><span class="p">(</span><span class="n">automagica_integer</span><span class="p">)</span>
</pre></div>
</div>
<p>You can do basic math manipulations with integers:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">automagica_int1</span> <span class="o">=</span> <span class="mi">5</span>
<span class="n">automagica_int2</span> <span class="o">=</span> <span class="mi">10</span>

<span class="n">automagica_int3</span> <span class="o">=</span> <span class="n">automagica_int1</span> <span class="o">+</span> <span class="n">automagica_int2</span> <span class="o">=</span> <span class="mi">15</span>
<span class="n">DisplayMessageBox</span><span class="p">(</span><span class="n">automagica_int3</span><span class="p">)</span>
</pre></div>
</div>
</div>
<div class="section" id="floats">
<span id="floats"></span><h4>Floats</h4>
<p>Floats represent real numbers and are written with a decimal point dividing the integer and fractional parts.</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">automagica_float</span> <span class="o">=</span> <span class="mf">3.1</span>
<span class="n">DisplayMessageBox</span><span class="p">(</span><span class="n">automagica_float</span><span class="p">)</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="math-operations">
<span id="math-operations"></span><h3>Math operations</h3>
<p>Down here is a list with basic math operations that can be used with both intergers and floats:</p>
<p><strong>abs(x)</strong> : The absolute value of x (the (positive) distance between x and zero)</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">x</span> <span class="o">=</span> <span class="o">-</span><span class="mi">3</span>
<span class="nb">abs</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mi">3</span>
</pre></div>
</div>
<p><strong>ceil(x)</strong> : The ceiling of x (the smallest integer not less than x)</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">x</span> <span class="o">=</span> <span class="mf">4.1</span>
<span class="n">ceil</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mi">5</span>
</pre></div>
</div>
<p><strong>exp(x)</strong> : The exponential of x: e<sup>x</sup></p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">x</span> <span class="o">=</span> <span class="mi">3</span>
<span class="n">exp</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mf">20.085536923187668</span>
</pre></div>
</div>
<p><strong>floor(x)</strong> : The floor of x: the largest integer not greater than x</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">x</span> <span class="o">=</span> <span class="mf">4.1</span>
<span class="n">floor</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mi">4</span>
</pre></div>
</div>
<p><strong>log(x)</strong> : The natural logarithm of x, for x&gt; 0</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">x</span> <span class="o">=</span> <span class="mi">10</span>
<span class="n">log</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mf">2.302585092994046</span>
</pre></div>
</div>
<p><strong>max(x1, x2,…)</strong> and <strong>max(x1, x2,…)</strong> :  The smallest and largest of its arguments: the value closest to positive infinity</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">x1</span> <span class="o">=</span> <span class="mi">2</span>
<span class="n">x2</span> <span class="o">=</span> <span class="mi">3</span>
<span class="nb">max</span><span class="p">(</span><span class="n">x1</span><span class="p">,</span><span class="n">x2</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mi">3</span>
</pre></div>
</div>
<p><strong>round(x)</strong> : x rounded to n digits from the decimal point.</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">x</span> <span class="o">=</span> <span class="mf">0.5</span>
<span class="nb">round</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mi">1</span>
</pre></div>
</div>
<p><strong>sqrt(x)</strong> : The square root of x for x &gt; 0</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">x</span> <span class="o">=</span> <span class="mi">9</span>
<span class="n">sqrt</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mi">3</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="lists">
<span id="lists"></span><h2>Lists</h2>
<p>Lists are very similar to arrays. They can contain any type of variable, and they can contain as many variables as you wish. Lists can also be iterated over in a very simple manner. Down here some examples of list usage:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="nb">list</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;R2-D2&quot;</span><span class="p">,</span> <span class="s2">&quot;Terminator&quot;</span><span class="p">,</span> <span class="s2">&quot;Optimus Prime&quot;</span><span class="p">,</span><span class="s2">&quot;WALL-E&quot;</span><span class="p">,</span> <span class="s2">&quot;RoboCop&quot;</span><span class="p">]</span>
<span class="nb">list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s2">&quot;WALL-E&quot;</span><span class="p">)</span>
<span class="nb">list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s2">&quot;RoboCop&quot;</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span><span class="p">[</span><span class="s2">&quot;R2-D2&quot;</span><span class="p">,</span> <span class="s2">&quot;Terminator&quot;</span><span class="p">,</span> <span class="s2">&quot;Optimus Prime&quot;</span><span class="p">,</span><span class="s2">&quot;WALL-E&quot;</span><span class="p">,</span> <span class="s2">&quot;RoboCop&quot;</span><span class="p">]</span>
<span class="nb">list</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span><span class="n">R2</span><span class="o">-</span><span class="n">D2</span>
</pre></div>
</div>
</div>
<div class="section" id="logic-operations">
<span id="logic-operations"></span><h2>Logic operations</h2>
<div class="section" id="if-statement">
<span id="if-statement"></span><h3>If statement</h3>
<p>An <em>if statement</em> is used for decision making. It will run the body of code only when if statement is true.
The conditional block of code has to be intended.</p>
<p>if condition :
indentedStatementBlock</p>
<p>An example would be:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">temperature</span> <span class="o">=</span> <span class="n">RequestUserInput</span><span class="p">()</span>
<span class="k">if</span> <span class="n">temperature</span> <span class="o">&gt;</span> <span class="mi">20</span><span class="p">:</span>
    <span class="n">DisplayMessageBox</span><span class="p">(</span><span class="s2">&quot;Wear short pants!&quot;</span><span class="p">)</span>
</pre></div>
</div>
<p>Expanding this example to multiple if statements:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">temperature</span> <span class="o">=</span> <span class="n">RequestUserInput</span><span class="p">()</span>
<span class="k">if</span> <span class="n">temperature</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">:</span>
    <span class="n">DisplayMessageBox</span><span class="p">(</span><span class="s2">&quot;Wear a warm hat!&quot;</span><span class="p">)</span>
<span class="k">if</span> <span class="n">temperature</span> <span class="o">&gt;</span> <span class="mi">20</span><span class="p">:</span>
    <span class="n">DisplayMessageBox</span><span class="p">(</span><span class="s2">&quot;Wear short pants!&quot;</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="n">DisplayMessageBox</span><span class="p">(</span><span class="s2">&quot;You can wear normal clothes!&quot;</span><span class="p">)</span>
</pre></div>
</div>
<p>The previous example will ouptut the string <em>“Wear a warm hat!”</em> if the inputnumber was lower than 10. If the number was higher than 20, the output will be <em>Wear short pants!</em>. If the condition was still not met, which means the input number was between 10 and 20, the else statement will be activated. In that case the message will show <em>“You can wear normal clothes!”</em>.</p>
</div>
<div class="section" id="while-loops">
<span id="while-loops"></span><h3>While loops</h3>
<p>The while loop evaluates the test expression.</p>
<p>If the test expression is true (nonzero), codes inside the body of while loop are exectued. The test expression is evaluated again. The process goes on until the test expression is false.</p>
<p>When the test expression is false, the while loop is terminated.</p>
<p><img alt="Imgur" src="_images/rh3OUdh.jpg" /></p>
<p>An example of a while loop:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">automagica_count</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">while</span> <span class="p">(</span><span class="n">automagica_count</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">):</span>
   <span class="n">display_string</span> <span class="o">=</span> <span class="s2">&quot;Current count is: &quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">automagica_count</span><span class="p">)</span>
   <span class="n">DisplayMessageBox</span><span class="p">(</span><span class="n">display_string</span><span class="p">)</span>
   <span class="n">count</span> <span class="o">=</span> <span class="n">count</span> <span class="o">+</span> <span class="mi">1</span>
</pre></div>
</div>
</div>
<div class="section" id="for-loops">
<span id="for-loops"></span><h3>For loops</h3>
<p>The initialization statement is executed only once.</p>
<p>Then, the test expression is evaluated. If the test expression is false (0), for loop is terminated. But if the test expression is true (nonzero), codes inside the body of for loop is executed and the update expression is updated.</p>
<p>This process repeats until the test expression is false.</p>
<p>The for loop is commonly used when the number of iterations is known.</p>
<p><img alt="Imgur" src="_images/V3p8spl.jpg" /></p>
<p>An example of a for loop:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">):</span>
    <span class="n">display_string</span> <span class="o">=</span> <span class="s2">&quot;We are currently at number &quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    <span class="n">DisplayMessageBox</span><span class="p">(</span><span class="n">display_string</span><span class="p">)</span>
</pre></div>
</div>
</div>
</div>
</div>
<div class="section" id="examples">
<span id="id1"></span><h1>Examples</h1>
<p>The following example opens Excel and reads a worksheet with the following layout:</p>
<p><img alt="Imgur" src="_images/jMj2ypX.png" /></p>
<p>It opens Chrome and surfs to google.com where the robot enters the searchterm. It then collects all the urls from the first page and writes these urls in Excel in the correct cell.</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">excel_path</span> <span class="o">=</span> <span class="s2">&quot;Enter Path to Excel Here&quot;</span> <span class="c1">#example: C:\\Users\Bob\\Desktop\\RPA Examples\\data.xlsx</span>

<span class="c1"># Read information from the excel in the second row, for columns 2 to 10</span>
<span class="n">lookup_terms</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">10</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">lookup_terms</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">ExcelReadCell</span><span class="p">(</span><span class="n">excel_path</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">col</span><span class="p">))</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="k">pass</span>

<span class="c1"># Open Chrome</span>
<span class="n">browser</span> <span class="o">=</span> <span class="n">ChromeBrowser</span><span class="p">()</span>

<span class="k">for</span> <span class="n">j</span><span class="p">,</span><span class="n">item</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">lookup_terms</span><span class="p">):</span>

    <span class="c1"># Browse to Google</span>
    <span class="n">browser</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;https://google.com&#39;</span><span class="p">)</span>
    <span class="c1"># Lookup the searchterm</span>
    <span class="n">browser</span><span class="o">.</span><span class="n">find_element_by_xpath</span><span class="p">(</span><span class="s1">&#39;//*[@id=&quot;lst-ib&quot;]&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">send_keys</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
    <span class="c1"># Search</span>
    <span class="n">browser</span><span class="o">.</span><span class="n">find_element_by_xpath</span><span class="p">(</span><span class="s1">&#39;//*[@id=&quot;lst-ib&quot;]&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">submit</span><span class="p">()</span>
    <span class="c1"># Get all found items</span>
    <span class="n">articles</span> <span class="o">=</span> <span class="n">browser</span><span class="o">.</span><span class="n">find_elements_by_class_name</span><span class="p">(</span><span class="s2">&quot;g&quot;</span><span class="p">)</span>
    <span class="c1"># Parse the headertexts to find the urls</span>
    <span class="n">urls</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">article</span> <span class="ow">in</span> <span class="n">articles</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="kn">import</span> <span class="nn">re</span>
            <span class="n">urls</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s1">&#39;https?://(?:[-\w.]|(?:%[\da-fA-F]</span><span class="si">{2}</span><span class="s1">))+&#39;</span><span class="p">,</span> <span class="n">article</span><span class="o">.</span><span class="n">text</span><span class="p">)[</span><span class="mi">0</span><span class="p">])</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="k">pass</span>

    <span class="c1"># Write found urls to Excel</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">url</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">urls</span><span class="p">):</span>
        <span class="n">ExcelWriteCell</span><span class="p">(</span><span class="n">excel_path</span><span class="p">,</span> <span class="n">row</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">,</span> <span class="n">col</span><span class="o">=</span><span class="n">j</span><span class="o">+</span><span class="mi">2</span><span class="p">,</span> <span class="n">write_value</span><span class="o">=</span><span class="n">url</span><span class="p">)</span>

<span class="c1"># Exit the browser</span>
<span class="n">browser</span><span class="o">.</span><span class="n">quit</span><span class="p">()</span>
</pre></div>
</div>
<p>If you open the Excel file, the result should look something like this:</p>
<p><img alt="Imgur" src="_images/7gSv7gc.png" /></p>
<p>Note that the links differ depending on your location, as google search results are location dependant.</p>
<div class="section" id="credits">
<span id="credits"></span><h2>Credits</h2>
<p>Under the hood, Automagica is built on some of the greatest open source libraries as listed down below. Large parts of the documentation is based on theirs. Special thanks to all contributors of these great libraries!</p>
<ul class="simple">
<li><p><a class="reference external" href="https://github.com/asweigart/pyautogui">PyAutoGUI</a><span class="link-target"> [https://github.com/asweigart/pyautogui]</span></p></li>
<li><p><a class="reference external" href="https://github.com/baijum/selenium-python">Selenium</a><span class="link-target"> [https://github.com/baijum/selenium-python]</span></p></li>
<li><p><a class="reference external" href="https://github.com/pywinauto/pywinauto">PyWinAuto</a><span class="link-target"> [https://github.com/pywinauto/pywinauto]</span></p></li>
<li><p><a class="reference external" href="https://github.com/madmaze/pytesseract">pytesseract</a><span class="link-target"> [https://github.com/madmaze/pytesseract]</span></p></li>
<li><p><a class="reference external" href="https://github.com/tesseract-ocr/tesseract">Tesseract</a><span class="link-target"> [https://github.com/tesseract-ocr/tesseract]</span></p></li>
<li><p><a class="reference external" href="https://bitbucket.org/openpyxl/openpyxl">OpenPyXL</a><span class="link-target"> [https://bitbucket.org/openpyxl/openpyxl]</span></p></li>
<li><p><a class="reference external" href="https://github.com/python-openxml/python-docx">python-docx</a><span class="link-target"> [https://github.com/python-openxml/python-docx]</span></p></li>
<li><p><a class="reference external" href="https://github.com/mhammond/pywin32">pywin32</a><span class="link-target"> [https://github.com/mhammond/pywin32]</span></p></li>
</ul>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>